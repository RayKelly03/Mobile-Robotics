#include <DRV8835MotorShield.h>
#include <mega.h>

// Pin definitions
#define LED_PIN 39
#define M1PWM 37
#define M1Phase 38
#define M2PWM 39  
#define M2Phase 20

// Motor driver library call
DRV8835MotorShield motors(M1Phase, M1PWM, M2Phase, M2PWM);

// Variables
int minValues[5] = {0};
int maxValues[5] = {0};
int threshold[5] = {0}; // change this from zero to threshold values if no calibrate

int Speed = 400; //standard speed
int turnSpeed = 300;
int LSP = 0; // speed variables for setting through PID
int RSP = 0;

// Pin assignments
int pins[] = {4, 5, 6, 7, 15}; // Define the pins to be calibrated
int numPins = 5; // Get the number of pins


//PID PROPERTIES
int P = 0;
int D = 0;
int I = 0; 
int previousError = 0;
int PIDval = 0;
int error = 0;
float Kp = 0;
float Ki = 0;
float Kd= 0;

//Distance sensor
const int sensorPin = 16; // Analog pin 16 for the sensor

// Threshold distance in cm to detect an obstacle
const float thresholdDistance = 4.0; 

//multiple detections to avoid false alarms
int detectCount = 0;
int nodeCount = 0;

// Function to convert the sensor reading to distance in centimeters
float getDistanceCM(int sensorValue) {
  // Convert the analog reading to voltage ( 5V reference)
  float voltage = sensorValue * (5.0 / 1023.0);

  if (voltage > 0.42) { // Avoid division by zero or invalid values
    return 27.86 / (voltage - 0.42); //0.42 V value is the approximate minimum voltage output
  } else {
    return -1; // Return -1 to indicate out-of-range or invalid reading
  }
}

// Separate Function to Handle Distance Sensor Logic
void checkDistanceSensor() {
  int sensorValue = analogRead(sensorPin);
  float distanceCM = getDistanceCM(sensorValue);
  
  if (distanceCM > 0 && distanceCM <= 60) { 
    if (distanceCM > thresholdDistance + 5) { // reset to zero
      detectCount = 0;  // Reset count if no obstacle
    }
    if (distanceCM <= thresholdDistance) {
      detectCount++;
      Serial.println("count++");
    }
    if (detectCount >= 30) {
      Serial.println("AHHHH OBSTACLEEE");
      motors.setSpeeds(0, 0);
      delay(500);
      motors.setM1Speed(turnSpeed);
      motors.setM2Speed(-turnSpeed);
      delay(1000); 
      motors.setSpeeds(0, 0);
      motors.setSpeeds(300, 300);
      delay(500);
      detectCount = 0;
    }
  }
  else {
    Serial.println("Out of range or invalid reading");
  }
}

// Spins the bot to calibrate thresholds for white and black surfaces
void calibrate() {
  unsigned long startTime = millis();  // Record the start time
  unsigned long calibrationDuration = 5000;  // Run calibration for 3000 ms

  motors.setSpeeds(200, -200);  // Spin the bot continuously during calibration

  while (millis() - startTime < calibrationDuration) {
    // Update min and max sensor values
    for (int j = 0; j < numPins; j++) {
      int value = analogRead(pins[j]);
      if (value < minValues[j]) {
        minValues[j] = value;
      }
      if (value > maxValues[j]) {
        maxValues[j] = value;
      }
    }
  }

  // Calculate thresholds
  for (int i = 0; i < numPins; i++) {
    threshold[i] = (minValues[i] + maxValues[i]) / 2;
  }

  // Print min, max, and threshold values for each sensor
  Serial.println("Calibration complete!");
  for (int i = 0; i < numPins; i++) {
    Serial.print("Sensor ");
    Serial.print(i);
    Serial.print(" - Min: ");
    Serial.print(minValues[i]);
    Serial.print(", Max: ");
    Serial.print(maxValues[i]);
    Serial.print(", Threshold: ");
    Serial.println(threshold[i]);
  }

  motors.setSpeeds(0, 0);  // Stop the motors after calibration
}

void pid(){
  int error = (analogRead(pins[1])-analogRead(pins[3]));

  P = error;
  I = I + error;
  D = error - previousError;

  PIDval = (Kp * P) + (Ki * I) + (Kd * D) + 20; 
  // +20 is an offset value to bring the final PIDval to 0 when on the line
  previousError = error;

  LSP = Speed - PIDval;
  RSP = Speed + PIDval;

  if (LSP > Speed) {
    LSP = Speed;
  }
  if (LSP < -0){
    LSP = -0;
  }
  if (RSP > Speed){
    RSP = Speed;
  }
  if (RSP < -0){
    RSP = -0;
  }
  motors.setSpeeds(RSP, LSP); // switch to deviate toward/away from line

  // Debugging output
  
  Serial.print("Error: "); Serial.print(error);
  Serial.print(", P: "); Serial.print(P);
  Serial.print(", Kp: "); Serial.print(Kp);
  Serial.print(", D: "); Serial.print(D);
  Serial.print(", Kd: "); Serial.print(Kd);
  Serial.print(", I: "); Serial.print(I);
  Serial.print(", LSP: "); Serial.print(LSP);
  Serial.print(", RSP: "); Serial.println(RSP);
  Serial.print(", PIDval: "); Serial.println(PIDval);
  
}

void setup() {
  Serial.println("Starting setup..."); // ADD THIS LINE
  pinMode(LED_PIN, OUTPUT);
  Serial.begin(115200); //VERY IMPORTNAT//////

  // Assign initial values to min and max
  for (int i = 0; i < numPins; i++) {
    minValues[i] = analogRead(pins[i]);
    maxValues[i] = analogRead(pins[i]);
  }
  calibrate();
  //mega(); music maybe
  Serial.println("Setup complete!");
  delay(1000);
}

void loop() {

  // Case for a sharp left turn or right turn
  // Left turn
  if (analogRead(pins[0]) < threshold[0] && analogRead(pins[4]) > threshold[4]) {
    motors.setM1Speed(50);
    motors.setM2Speed(turnSpeed);
  } 
  //Right turn
  else if (analogRead(pins[0]) > threshold[0] && analogRead(pins[4]) < threshold[4]) {
    motors.setM1Speed(turnSpeed);
    motors.setM2Speed(50);
  }
  //NODE Code
  else if (analogRead(pins[0]) < threshold[0] && analogRead(pins[4]) < threshold[4]) {
    Serial.print("Node ");
    motors.setSpeeds(400, 400); // incase speed value is changed
    motors.setSpeeds(0, 0); //stop
    delay(600); //another delay just cause
    motors.setSpeeds(300, 300);
    delay(400);
    nodeCount++;
  }
   // Regular line follow using PID or otherwise
  else if (analogRead(pins[2]) < threshold[2]) {
    //Kp = 0.0006 * (1000 - analogRead(pins[2]));
    Kd = 0.025; 
    Ki = 0.0001;
    Kp = 0.05; // Speed variable / (Max sensor Reading / 2)
    pid(); // To be implemented
  }
  checkDistanceSensor();
}
