#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

// I2C OLED Pins (ESP32-S3)
#define I2C_SDA 13
#define I2C_SCL 14

// OLED Display Config
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Sharp Distance Sensor 
#define SENSOR_PIN 16  

// Threshold values for obstacle detection
#define OBSTACLE_THRESHOLD 2800  
#define CLOSE_RANGE 2400
#define MID_RANGE 2000
#define FAR_RANGE 1500

void setup() {
  Serial.begin(115200);
  Wire.begin(I2C_SDA, I2C_SCL);

  pinMode(SENSOR_PIN, INPUT);

  // Initialize OLED display
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }

  // Initial message
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(1, 20);
  display.println("Starting..");
  display.display();
  delay(1000);
}

// ** Function to get distance sensor value and display it on OLED **
int getDistanceSensorValue() {
  int sensorValue = analogRead(SENSOR_PIN);  
  Serial.print("Sensor Value: "); 
  Serial.println(sensorValue);

  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 20);

  if (sensorValue > OBSTACLE_THRESHOLD) {
    display.println("Too Close!");
    Serial.println("Too Close!");
  } 
  else if (sensorValue > CLOSE_RANGE) {
    display.println("Very Close!");
    Serial.println("Very Close!");
  }
  else if (sensorValue > MID_RANGE) {
    display.println("Close!");
    Serial.println("Close!");
  }
  else if (sensorValue > FAR_RANGE) {
    display.println("Approaching..");
    Serial.println("Approaching..");
  } 
  else {
    display.println("Clear!");
    Serial.println("No obstacle detected.");
  }

  display.display();
  return sensorValue;  // Return sensor value for decision-making in the main code
}

void loop() {
  int distance = getDistanceSensorValue();

  //  If the distance sensor detects 2800, stop for parking **
  if (distance >= CLOSE_RANGE) {
    Serial.println("Parking Triggered!");
    // Call a parking function
    while (true) {  // Stop the robot
      Serial.println("Robot Stopped for Parking.");
      delay(1000);
    }
  }

  delay(500);  // Refresh every 500ms
}
